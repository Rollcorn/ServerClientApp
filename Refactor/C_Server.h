/*****************************************************************************

  MODULE_OR_CLASS <TODO: заменить на имя модуля/класса>

  Модуль/Класс <TODO: краткое описание назначения в одном предложении> ... (должно быть идентично в .h и .cpp)


  ОПИСАНИЕ <TODO: описание функций и возможностей класса/модуля, форматов используемых данных и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ИСПОЛЬЗОВАНИЕ <TODO: описания правил инициализации и использования, последовательности вызова интерфейсных функций,
                       ограничений и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ПРИМЕЧАНИЯ <TODO: особенности и замечания, не вошедшие в предыдущие разделы (при необходимости)>

  * ...
  * ...

  <TODO: при использовании тематических подразделов в разделах ОПИСАНИЕ, ИСПОЛЬЗОВАНИЕ
         выполнять их нумерацию в соответствии с уровнями вложенности.
         Тематические подразделы вводятся для описания различных аспектов функционирования,
         форматов используемых данных и пр.>

*****************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/
#ifndef SERVER_H
#define SERVER_H
#pragma once

#include <random>
#include <ctime>

#include "C_Socket.h"

namespace server { // TODO

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Server
{
public:
    //Создает и инициализирует сокет и выполняет коммуникацию с сокетом  клиентом
    void workingSession();

    C_Server()   = default;
    ~C_Server() = default;

private:
    mySocket::C_Socket m_socket; //объект
    static const int m_servBufferSize = 1024;    //Размер буфера сервера



    //Создает сокет инициализируя параметры сетевого соединения в переданной структуры
    int createSock ( struct sockaddr_in *servaddr );

    //Принимает запросы от сервера и отправляет в ответ случайное число от -100 до 100
    void communication ( int socketFd, int buffSize, struct sockaddr_in *siOther,
                        socklen_t siLen );


};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/
} // namespace server TODO

#endif // SERVER_H
