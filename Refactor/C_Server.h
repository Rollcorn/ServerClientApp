/*****************************************************************************

  CLASS C_Server

  Класс предоставляет функционал для работы сервера


  ОПИСАНИЕ

  * Открытый итерфейс класса представляет собо 3 метода:
    1) setupConnect - создает и инициализирует сокет с необходимыми параметрами
    2) setSockName - назначает сокету, созданного сервера, имя которое далее
       может использоваться для выведения логов с помощью метода m_socket.name()
  *
  *
  *
  Класс имеет один открытый для пользователей метод - workingSession, который
  создает и инициализирует сокет по протоколу UDP и при получении запросов от клиента
  отправляет случайное число. Логика взаимодействия сервера с клиентом распологается
  в методе communication и при желаении может быть изменена. Весь необходимый от сокетов
  функционал для работы сервера предоставляется объектом m_socket, экземпляром класса C_Socket.


  ИСПОЛЬЗОВАНИЕ

  * Для запуска сервера достаточно создать и проинициализировать экземпляр класса C_Server и вызвать метод workingSession.

  * При необходимости изменения параметров сокета обратиться к методу setupConnect и добавить необходимый функционал
    либо убрать не нужный. При этом в setupConnect в первую очередь всегда вызывается метод initWinsock
    у объекта класса C_Socket.

  * Параметры протокола и адреса сервера могут быть переданы и изменены в функции workingSession.

 *****************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

#pragma once

#include <random>
#include <ctime>
#include <typeinfo>

#include "C_Socket.h"

namespace server { // TODO

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Server
{
public:

    // Запуск сокета сервера
    bool setupConnect( std::string a_ipAddr, int a_port, int a_type = SOCK_DGRAM,
                       int a_protocol = IPPROTO_UDP, int a_ipFamily = AF_INET , int a_optFlag = 1 );

    // Установка имени сокета
    bool setSockName( std::string a_sockName );

    // Запуск работы сервера
    bool workingSession(int a_buffSize);

    C_Server( );
    ~C_Server() = default;

private:
    mySocket::C_Socket  m_socket;                // Объект обеспечивающий связь клиента с сервером
    const int           m_servBufferSize = 1024; // Размер буфера сервера

    // Обмен данными с клиентом
    bool communication(int a_buffSize);

};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/
} // namespace server TODO

