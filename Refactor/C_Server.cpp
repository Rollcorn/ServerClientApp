/*****************************************************************************

  MODULE_OR_CLASS <TODO: заменить на имя модуля/класса>

  Модуль/Класс <TODO: краткое описание назначения в одном предложении> ... (должно быть идентично в .h и .cpp)


  РЕАЛИЗАЦИЯ <TODO: описание особенностей реализации и используемых алгоритмов, если они не тривиальны и отсутствует документация>

  * ...
  * ...
  * ...


  ПРИМЕЧАНИЯ <TODO: особенности и замечания, не вошедшие в предыдущие разделы (при необходимости)>

  * ...
  * ...

  <TODO: при использовании тематических подразделов в разделе РЕАЛИЗАЦИЯ
         выполнять их нумерацию в соответствии с уровнями вложенности.
         Тематические подразделы вводятся для описания отдельных алгоритмов,
         форматов используемых данных и пр.>

*****************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/
#include "C_Server.h"

namespace server { // TODO

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

/*****************************************************************************
* Создает и инициализирует сокет и выполняет коммуникацию с сокетом сервера
*
* Функция для запуска в потоке работы клиента. Выполняет инициализацию
* Winsock, создает и инициализирует сокет клиента. коммуникация с клиентом
* происходит исходя из функции communication(). Работа продолжается пока
* клиент не закроет соединение.
*
* @param
*
* @return
*
*******************************************************************************/
void C_Server::workingSession()
{
    int protocol = 0;
    int addr = INADDR_ANY;

    // Создание сокета
    setupConnect(addr, protocol);

    // Запуск комуникации с сервером
    communication( m_servBufferSize );
}

/*****************************************************************************
* Создает и инициализирует сокет и выполняет коммуникацию с сокетом сервера
*
* Функция для запуска в потоке работы клиента. Выполняет инициализацию
* Winsock, создает и инициализирует сокет клиента. коммуникация с клиентом
* происходит исходя из функции communication(). Работа продолжается пока
* клиент не закроет соединение.
*
* @param
*
* @return
*
*******************************************************************************/

void C_Server::setupConnect(int addr, int protocol)
{
    // Инициализация библиотеки winsock2
    m_socket.initWinsock();

    // Создание сокета сервера
    m_socket.createSock( m_socket.servAddr(), addr, protocol );

    // Cвязывание сокет с локальным адресом протокола
    m_socket.makeBind( m_socket.servAddr());

    // Установка неблокирующего режима
    m_socket.setNonblock();

}


/*****************************************************************************
* Принимает запросы от сервера и отправляет в ответ случайное число
* от -100 до 100
*
* Пока клиент не закроет соединение соервер отсылает на каждый запрос клиента
* случайное число
*
*
* @param
* [in] sockfd    - файловый дескриптор сокета клиента;
* [in] buffSize - размер буфера клиента;
* [in] siOther  - указатель на структуру сетевых параметров сокета;
* [in] slen        - размер
*
* @return
*
********************************************************************************/
void C_Server::communication( int a_buffSize )
{
    std::cout << m_socket.name() << " Start communication..." << '\n';

    char buffer[a_buffSize];    // Буфер для полученных данных

    // Инициализация генератора случайных чисел
    std::random_device  rd;
    std::mt19937        gen(rd());
    std::uniform_int_distribution<int> dist(-100,100);

    // Очищение буфера
    ZeroMemory(&buffer, a_buffSize);

    while(true)
    {

        std::cout << m_socket.name() << " Waiting for data...\n";
        fflush(stdout);

        // Генерируется случайное число
        int num = dist(gen);

        // Получение запроса от клиента
        m_socket.reciveData(m_socket.clientAddr(), buffer, a_buffSize);

        // Отправка ответа клиенту
        m_socket.sendData(m_socket.clientAddr(), (char *)&num, sizeof(num));

    }
}
/*****************************************************************************
* Конструктор
*/
C_Server::C_Server(std::string a_ipAddr, int a_port,
                   std::string a_sockName): m_socket(a_ipAddr, a_port, a_sockName)
{}

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Definitions
*****************************************************************************/

/*****************************************************************************
  Functions Definitions
*****************************************************************************/

} // namespace server TODO




