/*****************************************************************************

  MODULE_OR_CLASS C_CLient

  Модуль/Класс предоставляет функционал сетевого клиента


  РЕАЛИЗАЦИЯ <TODO: описание особенностей реализации и используемых алгоритмов,
если они не тривиальны и отсутствует документация>
Созданный объект клиента начинает работу методом workingSession. Метод workingSession создает
сокет для для взаимодействия с сервером.
  * ...
  * ...
  * ...


  ПРИМЕЧАНИЯ <TODO: особенности и замечания, не вошедшие в предыдущие разделы (при необходимости)>

  * ...
  * ...

  <TODO: при использовании тематических подразделов в разделе РЕАЛИЗАЦИЯ
         выполнять их нумерацию в соответствии с уровнями вложенности.
         Тематические подразделы вводятся для описания отдельных алгоритмов,
         форматов используемых данных и пр.>

*****************************************************************************/
#include "C_Client.h"

namespace client {

/*****************************************************************************
  Macro Definitions
*****************************************************************************/


/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

/*****************************************************************************
* Создает и инициализирует сокет и выполняет коммуникацию с сокетом сервера
*
* Функция для запуска в потоке работы клиента. Выполняет инициализацию
* Winsock, создает и инициализирует сокет сервера. Клиент работает 30с, а
* затем выполняется отключение сокета
*
* @param
*
* @return
*
*******************************************************************************/
void C_Client::workingSession()
{
    int protocol     = IPPROTO_UDP;
    auto addr        = inet_addr(m_socket.ipAddress().c_str()); //Адрес сокета сервера
    int messPerS     = 1;   //частота отправки запросов на сервевер (сообщений в секунду)
    int workDuration = 30;  //длительность работы клиента

    //запуск сокета
    setupConnect(addr, protocol);

    //запуск сетевого взяимодействия со стороны клиента
    communication(messPerS, workDuration);

    //закрытие сокета
    m_socket.disconnect();
}

/*****************************************************************************
*Создает сокет инициализируя параметры сетевого соединения в переданной
* структуры.
*
* @param
* [in] siOther     - указатель на структуру сетвых параметров сокета для
* взаимодействия с сервером.
*
* @return
* sockFd - файловый дескриптор созданного сокета.
*/
void C_Client::setupConnect(unsigned long addr, int protocol)
{
    //
    m_socket.initWinsock();

    struct sockaddr_in *seraddr = m_socket.clientAddr();

    m_socket.createSock(seraddr, addr, protocol);

    m_socket.setNonblock();

}

/*****************************************************************************
* В течении 30с отправляет запросы к серверу и выводит полученные ответы
*
* Запросы к серверу отправляются до тех пор пока значение значение параметра
* timer не будет установлено в 1. При Sleep(1000) запросы отправляются раз в секунду
*
* @param
* [in] sockfd    - файловый дескриптор сокета клиента;
* [in] buffSize - размер буфера клиента;
* [in] siOther  - указатель на структуру сетевых параметров сокета;
* [in] slen        - размер
* [in] timer      - параметр для завершения комуникации клиента при переключении
* его в значение 1.
*
* @return
*
*/
void C_Client::communication(int messPerSec, int workDuration)
{
    char buffer[m_BufSize];

    char *message  = " Give me a number!";
    auto start     = std::chrono::steady_clock::now();
    auto end       = std::chrono::steady_clock::now();
    sockaddr_in *seraddr = m_socket.clientAddr();
    std::chrono::duration<double> curentWorkTime = end - start;

    while(curentWorkTime.count() < workDuration)
    {
            ZeroMemory(&buffer, sizeof(buffer));


            m_socket.sendData(seraddr, message, strlen(message));

            m_socket.reciveData(seraddr, buffer, sizeof(int));

            std::cout << m_socket.name() << " Get number: " << static_cast<int >(*buffer) << '\n';

            end = std::chrono::steady_clock::now();
            curentWorkTime = end - start;

            Sleep(messPerSec*1000);
    }

}
/*****************************************************************************
* Конструктор
*/
C_Client::C_Client(std::string a_ipAddr, int a_port, std::string name):
    m_socket(a_ipAddr, a_port, name)
{}

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Definitions
*****************************************************************************/

static const int s_servPort = 8080;
static const char* s_servIpAddr = "127.0.0.1";

/*****************************************************************************
  Functions Definitions
*****************************************************************************/

} // namespace client

