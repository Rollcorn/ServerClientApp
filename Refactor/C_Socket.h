/*****************************************************************************

  CLASS C_Socket

  Класс для создания и работы с сокетами средствами библиотеки WinSock2.


  ОПИСАНИЕ

  * Предоставляет интерфейс для работы с сокетами по протоколу UDP.


  ИСПОЛЬЗОВАНИЕ

  * Необходимыми для начала работы являеются следующие параметры:

        - IP-адрес сервера;
        - Номер порта для открытия сервера;
        - Имя сокета, используемое в выводимых логах.

  Порядок использования:

  * Перед использованием методов, для работы с сокетом, необходимо выполнить initWinsock
    для инициализации необходимых библиотек в системе. Метод initWinsock вызывается в конструкторе класса;

  * создать сокет createSock;

  * setNonblock и makeBind методы выполняются в произвольном порядке;

  * sendData и reciveData используются руководствуясь логикой создаваемой коммуникации;

  * servAddr и clientAddr - геттеры соответствующих структур адресов сервера и клиента, соответственно.
  ipAddress - геттер IP-адреса сервера.


    // 1. Создание сокета
    C_Socket socket;

    // 2. Настройка сокета
    socket.setupSock(...);

    // 3. Открытие сокета
    socket.openSock();

    // 4. Установка соединения (опционально для UDP)
    socket.connect();

    // 5. Использование сокета - обмен (в необходимом порядке)

    // 5.1. Отправка данных
    socket.sendData( ... );
    // 5.2. Получение данных
    socket.reciveData( ... );

    // 6. Закрытие соединения
    socket.disconnect();

    // -> п. 4,

    // 7. Закрытие сокета
    socket.close()

    // -> п. 2 или п. 3

    // 8. Удаление сокета
    Х

    * ...

    * ...

    * ...


  ПРИМИЧАНИЕ
  * При создании экземпляра конструктор создает 2 структуры sockaddr_in для адреса сервера и клиента,
    соответственно.

*****************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

#pragma once

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN

#endif

#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <iostream>
#include <thread>
#include <chrono>

namespace mySocket {
/*****************************************************************************
  Forward Declarations
*****************************************************************************/
/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/
struct trans_prot{
    // TODO
};

class C_Socket
{

    enum Flags{
        optNo       = 0x0,
        optNonblock = 0x1,
    };

public:
    // Инициализация библиотеки WinSock2
    bool initWinsock();

    // Запуск сокета
    bool setupSock( int a_protocol = IPPROTO_UDP, int a_type = SOCK_DGRAM,
                    int a_ipFamily = AF_INET );

    // Настройки сокета
    bool socketSettings( std::string a_ipAddr, int a_port, int a_optFlag = 1 );

    // Установка сокета в неблокирующий режим
    bool setNonblock();

    // Cвязывание сокет с локальным адресом протокола
    bool openSock();

    // Получение данныйх
    bool reciveData( struct sockaddr_in *a_srcAddr, char *a_data,
                     int a_dataLen, int *a_recvSize );

    // Отправка данных
    bool sendData(struct sockaddr_in *a_distAddr, char *a_data,
                   int a_dataLen, int *a_sendSize );

    // Закрытие сокета
    bool disconnect();

    // Задание имени сокета
    bool setName( std::string a_name );

    // Получение имени сокета
    std::string name();

    // Получение структуры адреса источника
    struct sockaddr_in* servAddr();

    // Получение структуры адреса клиента
    struct sockaddr_in* clientAddr();

    // Получение ip адреса сервера
    std::string ipAddress();

    C_Socket( );

    ~C_Socket();

private:
    // Параметры протокола
    int m_ipFamily; // IP протокол соединения
    int m_type;     // тип соединения сокета
    int m_protocol; // протокол соединения сокета

    // Параметры соединения
    std::string m_servIpAddr;   // IP адресс сервера
    short       m_servPort;     // Порт сервера
    std::string m_sockName;     // Имя сокета отображаемое в логе

    struct sockaddr_in *m_myAddr;    // Параметры соединения сервера
    struct sockaddr_in *m_otherAddr; // Параметры соединения клиента


    //Данные сокета
    WSADATA m_wsadata;
    int     m_sockFd = INVALID_SOCKET;  // дескриптор сокета

};


/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/


/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/
}//mySocket


