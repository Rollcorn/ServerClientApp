
/*****************************************************************************

  MODULE_OR_CLASS <TODO: заменить на имя модуля/класса>

  Модуль/Класс <TODO: краткое описание назначения в одном предложении> ... (должно быть идентично в .h и .cpp)


  ОПИСАНИЕ <TODO: описание функций и возможностей класса/модуля, форматов используемых данных и т.д., если не очевидно>

  * ...
  * ...
  * Описание протокола взаимоджействия см. в шапке protocol.h


  ИСПОЛЬЗОВАНИЕ <TODO: описания правил инициализации и использования, последовательности вызова интерфейсных функций,
                       ограничений и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ПРИМЕЧАНИЯ <TODO: особенности и замечания, не вошедшие в предыдущие разделы (при необходимости)>

  * ...
  * ...

  <TODO: при использовании тематических подразделов в разделах ОПИСАНИЕ, ИСПОЛЬЗОВАНИЕ
         выполнять их нумерацию в соответствии с уровнями вложенности.
         Тематические подразделы вводятся для описания различных аспектов функционирования,
         форматов используемых данных и пр.>

*****************************************************************************/
#pragma once

#include "C_Socket.h"

namespace client { // TODO

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Client : private C_Socket
{
public:

    //Создает и инициализирует сокет и выполняет коммуникацию с сокетом сервера
    void workingSession();

    //Установить размер буфера сообщений
    auto setBufSize(int a_BufSize);

    C_Client(int a_ipAddr, int a_port);
    ~C_Client() = default;

private:

    //Создает сокет инициализируя параметры сетевого соединения в переданной структуры
    int createSock ( struct sockaddr_in *servaddr );
    int m_BufSize;

    //В течении 30с отправляет запросы к серверу и выводит полученные ответы
    void communication ( int a_sockfd, int a_buffSize, struct sockaddr *a_siOther, socklen_t a_slen);

    //Размер буфера клиента

};


/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/


} // namespace client TODO

