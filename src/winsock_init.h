/*****************************************************************************

  MODULE_OR_CLASS <TODO: заменить на имя модуля/класса>

  Модуль/Класс <TODO: краткое описание назначения в одном предложении> ... (должно быть идентично в .h и .cpp)


  ОПИСАНИЕ <TODO: описание функций и возможностей класса/модуля, форматов используемых данных и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ИСПОЛЬЗОВАНИЕ <TODO: описания правил инициализации и использования, последовательности вызова интерфейсных функций,
                       ограничений и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ПРИМЕЧАНИЯ <TODO: особенности и замечания, не вошедшие в предыдущие разделы (при необходимости)>

  * ...
  * ...

  <TODO: при использовании тематических подразделов в разделах ОПИСАНИЕ, ИСПОЛЬЗОВАНИЕ
         выполнять их нумерацию в соответствии с уровнями вложенности.
         Тематические подразделы вводятся для описания различных аспектов функционирования,
         форматов используемых данных и пр.>

*****************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

#ifndef WINSOCK_INIT_H
#define WINSOCK_INIT_H

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN

#endif

#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <iostream>
//#include <stdio.h>


/*****************************************************************************
  Forward Declarations
*****************************************************************************/

//const int DEFAULT_PORT = 27015;
static const int SERV_PORT = 8888;
static const char* SERVER_ADDRESS = "127.0.0.1";

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Winsock_Init
{

public:
    int set_nonblock(int socket_fd, u_long iMode);

    int initializingWinsock(WSADATA &wsadata);

    int create_sock( int sock_fd, struct sockaddr_in *serv_addr );

};
/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/

#endif // WINSOCK_INIT_H


