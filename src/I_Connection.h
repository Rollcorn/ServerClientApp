/*****************************************************************************

  i_Socket

  Интерфес сокета

  ОПИСАНИЕ

  * формат данных ...

  ИСПОЛЬЗОВАНИЕ

  * Для реализации собственного класса сокета необходимо унаследоваться от данного интерфеса
    и реализовать все виртуальные методы.

  * Интерфейс позволяет реализовывать свои сокеты вне зависимости от используемых библиотек,
    платформ и с различной логикой реализации.

    setup()

    open()

    recv()

    send()

*****************************************************************************/

#pragma once

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN

#endif

#include "I_Connection.h"

#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <iostream>
#include <thread>
#include <chrono>
#include <map>
#include <vector>

#include "Config.h"


namespace myTask {

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class I_Connection
{

public:

    I_Connection()  = default;
    virtual ~I_Connection() = default;

    /**************************************************************************
     * Создание сокета
     *
     * Выполняется инициализация ip-адреса и порта сокета, структуры адреса
     * сокета, выполнения дополнительных опций сокета
     *
     * @param
     *  [in] conParam   - пара значений first - IP-адрес, second - порт;
     *
     * @return
     *  успшность запуска сокета
     */
    virtual bool setup( const conf_t& a_conParam ) = 0;

    /*****************************************************************************
     * Cвязывание сокет с локальным адресом протокола
     *
     * Метод выполняется только для сокета сервера для привязки его к определенному
     * локальному адресу метод производит логирование результата выполнения привязки.
     *
     * @return
     *  успешность открытия сокета
     */
    virtual bool open() = 0;

    /*****************************************************************************
     * Получение данных из сокета
     *
     * @param
     *  [out] a_buffer   - буфер для записи полученных данных.
     *  [out] a_from     - адрес отправителя.
     *
     * @return
     *  true - функция завершена успешно, данные полученны если a_buffer.size() != 0;
     *  false - ошибка, дальнейшая работа невозможна.
     *      0     -
     *      иначе -
     */
    virtual bool recv( std::vector<char> &a_buffer, std::string &a_from ) = 0;

    /*****************************************************************************
     * Отправка данных
     *
     * @param
     *  [out] a_buffer - буфер для записи полученных данных.
     *
     *  [in]  a_data - буфер из которого данные отправляются в сокет.
     *  [in]  a_to   - адрес отправителя.
     *
     * @return
     *  true - функция завершена успешно, данные отправленны если a_buffer.size() != 0;
     *  false - ошибка, дальнейшая работа невозможна.
     */
    virtual bool send( const std::vector<char> &a_data, const std::string &a_to ) = 0;

    /*****************************************************************************
     * Освобождение ресурсов соединения
     */
    virtual bool flush() = 0;

    /******************************************************************************
     * Закрытие соединения
     *
     * Выполняет отключение созданного сокета
     */
    virtual bool close() = 0;

    /***************************************************************************
     * Имя объекта соединения
     *
     * Возвращает имя сокета в удобном формате.
     *
     * @return
     *  собственный адрес сокета.
     */
    virtual std::string name() = 0;


    /***************************************************************************
     * Обработка ошибки
     *
     * Проверка возможности продолжения работы программы или повторного вызова
     * функции/метода.
     *
     * @return
     *  true - можно продолжать работу.
     *  false - критическая ошибка.
     */
    virtual bool needToRepeat() = 0;

    /***************************************************************************
     * Адрес удаленного сокета
     *
     * Возвращает имя сокета в удобном формате.
     *
     * @return
     *  адрес объекта сокета.
     */
    virtual std::string remoteAddr() = 0;
};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/

} // namespace myTask
