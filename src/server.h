/*****************************************************************************

  MODULE_OR_CLASS <TODO: заменить на имя модуля/класса>

  Модуль/Класс <TODO: краткое описание назначения в одном предложении> ... (должно быть идентично в .h и .cpp)


  ОПИСАНИЕ <TODO: описание функций и возможностей класса/модуля, форматов используемых данных и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ИСПОЛЬЗОВАНИЕ <TODO: описания правил инициализации и использования, последовательности вызова интерфейсных функций,
                       ограничений и т.д., если не очевидно>

  * ...
  * ...
  * ...


  ПРИМЕЧАНИЯ <TODO: особенности и замечания, не вошедшие в предыдущие разделы (при необходимости)>

  * ...
  * ...

  <TODO: при использовании тематических подразделов в разделах ОПИСАНИЕ, ИСПОЛЬЗОВАНИЕ
         выполнять их нумерацию в соответствии с уровнями вложенности.
         Тематические подразделы вводятся для описания различных аспектов функционирования,
         форматов используемых данных и пр.>

*****************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/
#ifndef SERVER_H
#define SERVER_H
#pragma once
#include "winsock_init.h"

namespace server { // TODO

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Server : private C_Winsock_Init
{
public:
    C_Server() = default;
    ~C_Server() = default;

    void working_session();

private:
    void dg_echo(int socket_fd, char *buffer, int buff_size, struct sockaddr_in *pcliaddr, socklen_t client_len);

    static const int SER_BUFFER_SIZE = 1024;
};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/


} // namespace server TODO

#endif // SERVER_H
