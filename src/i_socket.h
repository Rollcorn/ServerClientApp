/*****************************************************************************

  i_Socket

  Интерфес минимально необходимых методов для реализаци сокета


  ИСПОЛЬЗОВАНИЕ

    * Для реализации собственного класса сокета необходимо унаследоваться от данного интерфеса
      и реализовать все виртуальные методы.

    * Интерфейс позволяет реализовывать свои сокеты вне зависимости от используемых библиотек,
      платформ и с различной логикой реализации.


*****************************************************************************/

#pragma once

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN

#endif

#include "i_socket.h"

#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <iostream>
#include <thread>
#include <chrono>

namespace myTask {

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/


class I_Socket {

public:

    I_Socket(){}

    virtual ~I_Socket(){}

    /**************************************************************************
     * Запуск сокета
     *
     * Выполняется инициализация ip-адреса и порта сокета, структуры адреса
     * сокета, выполнения дополнительных опций сокета
     *
     * @param conParam - пара значений first - IP-адрес,
     *                                 second - порт;
     *        a_sockAddr - структура адреса сокетаl;
     *        a_optFlag  - флаговая переменная, дополнительных опций сокета
     */
    virtual bool setup( std::pair<std::string, short> a_conParam, struct sockaddr_in *a_sockAddr,
                        int a_optFlag ) = 0;

    // Cвязывание сокета с локальным адресом протокола
    virtual bool open() = 0;

    // Соединение сокета с удаленным адресом
//    virtual bool connect() = 0;

    // Получение данных
    virtual bool recv( char *a_data, int a_dataLen, int *a_recvSize ) = 0;

    // Отправка данных
    virtual bool send( char *a_data, int a_dataLen, int *a_sendSize ) = 0;

    // Закрытие соединеия
    virtual bool close() = 0;

    // Закрытие сокета
    virtual bool flush() = 0;

    // Cтруктура адреса собственного сокета
    virtual struct sockaddr_in * ownSockAdr() = 0;

    // Получение адреса удаленного сокета
    virtual struct sockaddr_in * remoteSockAdr() = 0;

    // Имя сокета (ip - port)
    virtual std::string name() = 0;


};


/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/

} // namespace myTask
