/*****************************************************************************

  C_Client

  Предоставляет реализацию сетевого клиента.

  ОПИСАНИЕ

  * Класс имеет 3 публичных метода которые позволяют запустить сокет клиента
    setupConnect для обмена данными и метод workingSession являющейся оберткой
    логирования над приватной фунцией communication которая отвечает за логику
    взаимодействия клиента с сервером.


  ИСПОЛЬЗОВАНИЕ

  1) Для запуска сервера необходимо создать экземпляр класса C_Client

        C_Client client;

  2) Настроить/запустить сокет сервера:

        client.setup( <ip-адрес>, <порт>, <тип соединени>, <Тип ip-протокола>,
                      <тип домена>, <флаговая переменная> )


    <флаговая переменная> - примнимает значение 0 и 1, если задана 1, то запущенный
                            сокет будет настроен в неблокирующий режим, в обратном
                            случае сокет будет работать в блокирующем режиме. По
                            умолчанию передается значение 1.

  3) При необходимости - назначить сокету имя:

        server.setSockName( <Имя сокета> );

  4) вызвать метод workingSession(...). Метод setup(...)
     возвращает значение bool, поэтому желательно выполнить проверку того факта что
     сокет создался и запустился и только в этом случае имеет смысл запускать
     функцию обмена.

     if ( client.setupConnect ) client.workingSession();

     В ином случае можно прописать в лог сообщение об ошибке запуска.

     * Параметры передаваемые в функцию workingSession влияют на то как часто
     * клиент будет обращаться к сервеверу и как долго он будет это делать.


*****************************************************************************/

#pragma once

#include <chrono>
#include "i_socket.h"
#include "i_socketcreator.h"

#include "C_UDPSocket.h"


namespace myTask {
/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Client {
public:

    C_Client();

    ~C_Client();

    // Запуск сокета клиента
    bool setup( std::pair< std::string, short > a_conParam, int a_optFlag );

    // Закрытие сокета клиента
    bool flush();

    // Работа клиента
    bool workingSession( int a_messPerSec, int a_workDuration );



private:

    // Объект инстанцирующий сокет необходимого протокола
    I_SocketCreator* m_creator = new I_SocketCreator();

    // объект обеспечивающий связь клиента с сервером
    I_Socket* m_socket = m_creator->MakeSocket("UDP");

    // размер буфера сообщений клиента
    const int m_BufSize = 512;

    // Запуск сетевого взаимодействия с сервером
    bool communication( int messPerSec, int workDuration );

};


/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/


/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/


} // namespace client TODO

