/*****************************************************************************

  C_Client

  Класс предоставляет функционал сетевого клиента.

  ОПИСАНИЕ

  * Класс имеет 3 публичных метода которые позволяют запустить сокет клиента setupConnect для обмена данными и
    метод workingSession являющейся оберткой логирования над приватной фунцией communication которая отвечает
    за логику взаимодействия клиента с сервером.


  ИСПОЛЬЗОВАНИЕ

  1) Для запуска сервера необходимо создать экземпляр класса C_Client

        C_Client client;

  2) Настроить/запустить сокет сервера:

        client.setupConnect( <ip-адрес>, <порт>, <тип соединени>, <Тип ip-протокола>, <тип домена>,
                             <флаговая переменная> )

    <ip-адрес> и <порт> определяются фактической информацией об адресе клиента/сервера;

    <тип соединени> - тип сокета. Может принимать следющие сначения:
        * SOCK_STREAM - потоковый сокет;
        * SOCK_DGRAM     - сокет дейтаграмм;
        * SOCK_SEQPACKET - сокет последовательных пакетов;
        * SOCK_RAW       - символьный (неструктурированный) сокет.

    <Тип ip-протокола> - возможные значения параметра protocol:
        * IPPROTO_TCP  - транспортный протокол TCP;
        * IPPROTO_UDP  - транспортный протокол UDP;
        * IPPROTO_SCTP - транспортный протокол SCTP;

    <тип домена> - семейство сокетов (family):
        * AF_INET  - Протоколы IPv4;
        * AF_INET6 - Протоколы IPv6;
        * AF_LOCAL - Протоколы доменных сокетов Unix;
        * AF_ROUTE - Маршрутизирующие сокеты
        * AF_KEY   - Сокет управления ключами

    <флаговая переменная> - примнимает значение 0 и 1, если задана 1, то запущенный сокет будет настроен
                            в неблокирующий режим, в обратном случае сокет будет работать в блокирующем
                            режиме. По умолчанию передается значение 1.

  3) При необходимости - назначить сокету имя:

        server.setSockName( <Имя сокета> );

  4) вызвать метод workingSession( <число сообщений в секунду>, <длительность работы клиента> ). Метод setupConnect
     возвращает значение bool, поэтому желательно выполнить проверку того факта что сокет создался и запустился и
     только в этом случае имеет смысл запускать функцию обмена.

     if ( client.setupConnect ) client.workingSession();

     В ином случае можно прописать в лог сообщение об ошибке запуска.

     * Параметры передаваемые в функцию workingSession влияют на то как часто клиент будет обращаться к сервеверу
       и как долго он будет это делать.


*****************************************************************************/
#pragma once

#include <chrono>

#include "C_Socket.h"

namespace myTask {

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Client
{
public:
    bool setSockName( std::string a_sockName );

    // Запуск сокета клиента
    bool setupConnect( std::string a_ipAddr, int a_port, int a_type = SOCK_DGRAM,
                       int a_protocol = IPPROTO_UDP, int a_ipFamily = AF_INET ,
                       int a_optFlag = 1 );

    // Закрытие сокета клиента
    bool flushConnect();

    // Работа клиента
    bool workingSession( int a_messPerSec, int a_workDuration );

    C_Client();
    ~C_Client() = default;

private:
    // объект обеспечивающий связь клиента с сервером
    C_Socket m_socket;
    // размер буфера сообщений клиента
    const int          m_BufSize = 512;

    // Запуск сетевого взаимодействия с сервером
    bool communication( int messPerSec, int workDuration );

};


/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/


/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/


} // namespace client TODO

