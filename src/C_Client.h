/*****************************************************************************

  C_Client

  Предоставляет реализацию сетевого клиента.


  ОПИСАНИЕ

  * Класс имеет 3 публичных метода которые позволяют:

    - запустить сетевой клиент реализующий совой обмен с помощью сокета по
      протоколу UDP;
    - провести сессии сетевого взаимодействия с другим сокетом;
    - завершить соединение и освободить ресурсы;


  ИСПОЛЬЗОВАНИЕ

  1) Для запуска сервера необходимо создать экземпляр класса C_Client.

        C_Client client = new Client();

  2) Настроить/запустить сокет сервера:

        client.setup(...);


  3) Начать процесс сетевого взаимодействия.

        client.workingSession();

  4) Закрыть соединение и освободить все ресурсы.

        client.flush();


  ПРИМИЧАНИЕ

  * Больше информации об протоколе работы клиента см. "Protocol.h"

*****************************************************************************/

#pragma once

#include <chrono>
#include <map>
#include <cerrno>

#include "I_Connection.h"
#include "SocketCreator.h"
#include "C_UdpSocket.h"
#include "Config.h"

namespace myTask {

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Client
{
public:

    C_Client();

    ~C_Client();

    // Создание/запуск сокета клиента
    bool setup( const conf_t& a_conParam );

    // Работа клиента
    bool workingSession( int a_messPerSec, int a_workDuration );

    // Закрытие сокета клиента
    bool flush();


private:
    // Прием сообщения в буфер
    bool recv( std::vector<char> &a_buffer, std::string &a_fromAddr);

    // Отправка сообщения
    bool send( std::string a_message );

    // Временной интервал между отправками клиентом сообщений
    const std::chrono::milliseconds s_sendTimout = std::chrono::milliseconds(1000);
    const std::string s_getNumMessage = "Give me a number!";   // Запрос данных
    const std::string s_endConnMessage = "Stop Connection";   // Сигнал к остановке соединения

    // Размер буфера сообщений клиента
    const int s_bufferLen = 512;

    // Сокет клиента
    I_Connection* m_connector = nullptr;

    // Запуск сетевого взаимодействия с сервером
    bool communication( int a_messPerSec, int a_workDuration );
};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/

} // namespace myTask

