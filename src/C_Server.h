/********************************************************************************************************

  C_Server

  Класс предоставляет функционал для работы сервера


  ОПИСАНИЕ

  * Класс позволяет запустить сокет для обмена данными с клиентами, проводить логированиие выполняемых операций
    и производить ожидание запросов клиентов.

  * Пользователю класса представляется интерфейс из 3 методов:

    1) setupConnect - создает и инициализирует сокет с необходимыми параметрами.
       Первый и второй параметр метода - ip-адрес и порт, необходимо задать вручную остальные
       параметры можно оставить по умолчанию. По умолчанию передаются параметры для создани\
       UDP сокета.

    2) setSockName - назначает сокету серевера имя если необходимо при выведении логов.

    3) workingSession - получает размер буфера в который будет сохранять полученные из сокета
    данные. Ожидает запроса от клиента, чтобы отправить ему случайно сгенерированное число.


  ИСПОЛЬЗОВАНИЕ

  1) Для запуска сервера необходимо создать экземпляр класса C_Server.

        C_Server server;

  2) Запустить сокет сервера на полученном адресе и с полученными опциями.

        server.setup(...);

  3) вызвать метод workingSession(...) - логирует состояние активной работы сервера.

  4) Метод communication(...) инкапсулирует логику обработкии полученных данных
     и логику отправки ответа.


*********************************************************************************************************/

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

#pragma once

#include <random>
#include <ctime>
#include <typeinfo>

#include "I_Socket.h"
#include "SocketCreator.h"
#include "C_UdpSocket.h"

namespace myTask {

/*****************************************************************************
  Forward Declarations
*****************************************************************************/


/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

class C_Server
{
public:

    C_Server();

    ~C_Server();

    // Запуск сервера
    bool setup( std::pair<std::string, short> a_conParam, int a_optFlag = 1 );

    // Запуск работы сервера
    bool workingSession();

    // Закрытие сокета клиента
    bool flush();

private:

    // Обмен данными с клиентом
    bool communication(const int a_bufSize);    

    // Объект обеспечивающий связь клиента с сервером
    I_Socket*  m_socket = nullptr;
    // Размер буфера сервера
    const int m_servBufferSize = 1024;



};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Deсlarations
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/
} // namespace myTask

